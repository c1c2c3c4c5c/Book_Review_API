# Book Review API 📚

A comprehensive RESTful API for a Book Review system built with Node.js, Express, and MongoDB. Features JWT authentication, CRUD operations for books and reviews, search functionality, and comprehensive input validation.

## 🚀 Features

- ✅ **User Authentication**: JWT-based signup and login
- ✅ **Book Management**: Add, view, and search books with filters
- ✅ **Review System**: Submit, update, and delete reviews (one per user per book)
- ✅ **Advanced Search**: Search books by title or author (partial & case-insensitive)
- ✅ **Pagination**: All list endpoints support pagination
- ✅ **Input Validation**: Comprehensive validation using express-validator
- ✅ **Security**: Rate limiting, CORS, Helmet for security headers
- ✅ **Error Handling**: Centralized error handling with meaningful messages
- ✅ **Automatic Rating**: Books show average rating calculated from all reviews

## 🛠️ Tech Stack

- **Backend**: Node.js with Express.js
- **Database**: MongoDB with Mongoose ODM
- **Authentication**: JWT (JSON Web Tokens)
- **Validation**: express-validator
- **Security**: Helmet, CORS, Rate Limiting, bcrypt
- **Password Hashing**: bcryptjs

## 📦 Installation & Setup

### Prerequisites
- Node.js (v14 or higher)
- MongoDB (local installation or MongoDB Atlas account)
- npm or yarn package manager

### 1. Project Setup

```bash
# Create project directory
mkdir book-review-api && cd book-review-api

# Initialize npm project
npm init -y

# Install dependencies
npm install express mongoose bcryptjs jsonwebtoken dotenv express-validator cors helmet express-rate-limit

# Install development dependencies
npm install --save-dev nodemon jest supertest
```

### 2. Create Project Structure

```bash
# Create directories
mkdir models routes middleware

# Create main files
touch server.js
touch .env
touch .gitignore
```

Your project structure should look like:
```
book-review-api/
├── models/
│   ├── User.js
│   ├── Book.js
│   └── Review.js
├── routes/
│   ├── auth.js
│   ├── books.js
│   ├── reviews.js
│   └── search.js
├── middleware/
│   ├── auth.js
│   └── errorHandler.js
├── .env
├── .gitignore
├── server.js
├── package.json
└── README.md
```

### 3. Environment Configuration

Create a `.env` file in the root directory:

```env
# Server Configuration
PORT=3000
NODE_ENV=development

# Database Configuration (choose one)
# For local MongoDB:
MONGODB_URI=mongodb://localhost:27017/bookreviews

# For MongoDB Atlas (cloud):
# MONGODB_URI=mongodb+srv://username:password@cluster.mongodb.net/bookreviews

# JWT Configuration (generate a secure secret)
JWT_SECRET=your-super-secret-jwt-key-make-it-long-and-random
```

#### 🔐 Generate JWT Secret:
```bash
# Generate a secure JWT secret
node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
```
Copy the output and replace `your-super-secret-jwt-key-make-it-long-and-random` in your `.env` file.

### 4. Database Setup

#### Option A: Local MongoDB
```bash
# Install MongoDB locally (Ubuntu/Debian)
sudo apt update
sudo apt install -y mongodb

# Start MongoDB service
sudo systemctl start mongodb
sudo systemctl enable mongodb

# Verify MongoDB is running
sudo systemctl status mongodb
```

#### Option B: MongoDB Atlas (Cloud)
1. Go to [MongoDB Atlas](https://www.mongodb.com/atlas)
2. Create a free account
3. Create a new cluster
4. Get your connection string
5. Replace the `MONGODB_URI` in your `.env` file

### 5. Update package.json Scripts

Add these scripts to your `package.json`:

```json
{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest"
  }
}
```

### 6. Create .gitignore

```gitignore
# Dependencies
node_modules/

# Environment variables
.env

# Logs
logs
*.log
npm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/

# nyc test coverage
.nyc_output

# Dependency directories
node_modules/

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env

# VS Code
.vscode/

# MacOS
.DS_Store
```

### 7. Start the Server

```bash
# Development mode with auto-restart
npm run dev

# Production mode
npm start
```

🎉 **Your server should start on http://localhost:3000**

## 📚 API Documentation

### Base URL
```
http://localhost:3000/api
```

### 🔐 Authentication Endpoints

#### 1. Register User
```http
POST /api/auth/signup
Content-Type: application/json

{
  "username": "john_doe",
  "email": "john@example.com",
  "password": "SecurePass123"
}
```

**Response (201):**
```json
{
  "message": "User registered successfully",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": "64f8a1b2c3d4e5f6a7b8c9d0",
    "username": "john_doe",
    "email": "john@example.com",
    "role": "user"
  }
}
```

#### 2. Login User
```http
POST /api/auth/login
Content-Type: application/json

{
  "email": "john@example.com",
  "password": "SecurePass123"
}
```

**Response (200):**
```json
{
  "message": "Login successful",
  "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
  "user": {
    "id": "64f8a1b2c3d4e5f6a7b8c9d0",
    "username": "john_doe",
    "email": "john@example.com",
    "role": "user"
  }
}
```

### 📖 Book Endpoints

#### 3. Add New Book (Authenticated)
```http
POST /api/books
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json

{
  "title": "The Great Gatsby",
  "author": "F. Scott Fitzgerald",
  "genre": "Classic Literature",
  "description": "A classic American novel set in the Jazz Age that explores themes of wealth, love, idealism, and moral decay.",
  "publishedYear": 1925,
  "isbn": "978-0-7432-7356-5"
}
```

#### 4. Get All Books (with filters & pagination)
```http
GET /api/books?page=1&limit=10&author=fitzgerald&genre=classic
```

**Query Parameters:**
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 10, max: 50)
- `author`: Filter by author (case-insensitive partial match)
- `genre`: Filter by genre (case-insensitive partial match)

#### 5. Get Book Details by ID
```http
GET /api/books/64f8a1b2c3d4e5f6a7b8c9d1?page=1&limit=5
```

Returns book details with average rating and paginated reviews.

### ⭐ Review Endpoints

#### 6. Submit Review (Authenticated)
```http
POST /api/books/64f8a1b2c3d4e5f6a7b8c9d1/reviews
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json

{
  "rating": 5,
  "comment": "This book is absolutely fantastic! The writing style is beautiful and the story is captivating."
}
```

#### 7. Update Review (Authenticated - Own reviews only)
```http
PUT /api/reviews/64f8a1b2c3d4e5f6a7b8c9d2
Authorization: Bearer YOUR_JWT_TOKEN
Content-Type: application/json

{
  "rating": 4,
  "comment": "Updated my review after re-reading. Still great but not perfect."
}
```

#### 8. Delete Review (Authenticated - Own reviews only)
```http
DELETE /api/reviews/64f8a1b2c3d4e5f6a7b8c9d2
Authorization: Bearer YOUR_JWT_TOKEN
```

### 🔍 Search Endpoint

#### 9. Search Books
```http
GET /api/search?q=gatsby&page=1&limit=10
```

**Query Parameters:**
- `q`: Search query (required) - searches in title and author
- `page`: Page number (default: 1)
- `limit`: Items per page (default: 10, max: 50)

### 🏥 Utility Endpoints

#### 10. Health Check
```http
GET /api/health
```

## 🧪 Example cURL Commands

### Test the complete flow:

```bash
# 1. Register a new user
curl -X POST http://localhost:3000/api/auth/signup \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "email": "test@example.com",
    "password": "TestPass123"
  }'

# 2. Login (save the token from response)
curl -X POST http://localhost:3000/api/auth/login \
  -H "Content-Type: application/json" \
  -d '{
    "email": "test@example.com",
    "password": "TestPass123"
  }'

# 3. Add a book (replace YOUR_JWT_TOKEN with actual token)
curl -X POST http://localhost:3000/api/books \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "title": "1984",
    "author": "George Orwell",
    "genre": "Dystopian Fiction",
    "description": "A dystopian social science fiction novel and cautionary tale about the dangers of totalitarianism.",
    "publishedYear": 1949
  }'

# 4. Get all books with filters
curl "http://localhost:3000/api/books?page=1&limit=5&author=orwell"

# 5. Search books
curl "http://localhost:3000/api/search?q=1984&page=1&limit=10"

# 6. Submit a review (replace BOOK_ID and TOKEN)
curl -X POST http://localhost:3000/api/books/BOOK_ID/reviews \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer YOUR_JWT_TOKEN" \
  -d '{
    "rating": 5,
    "comment": "Incredible book that changed my perspective on society and government control. Highly recommended!"
  }'

# 7. Get book details with reviews
curl "http://localhost:3000/api/books/BOOK_ID?page=1&limit=5"
```

## 📊 Database Schema

### Collections Overview

#### Users Collection
```javascript
{
  _id: ObjectId,
  username: String (unique, 3-30 chars, alphanumeric + underscore),
  email: String (unique, valid email format),
  password: String (hashed with bcrypt),
  role: String (enum: ['user', 'admin'], default: 'user'),
  createdAt: Date,
  updatedAt: Date
}
```

#### Books Collection
```javascript
{
  _id: ObjectId,
  title: String (required, max 200 chars),
  author: String (required, max 100 chars),
  genre: String (required, max 50 chars),
  description: String (required, max 2000 chars),
  publishedYear: Number (1000 - current year),
  isbn: String (optional, valid ISBN format),
  averageRating: Number (0-5, auto-calculated),
  totalReviews: Number (auto-calculated),
  addedBy: ObjectId (ref: User),
  createdAt: Date,
  updatedAt: Date
}
```

#### Reviews Collection
```javascript
{
  _id: ObjectId,
  rating: Number (1-5, required),
  comment: String (10-1000 chars, required),
  book: ObjectId (ref: Book),
  user: ObjectId (ref: User),
  createdAt: Date,
  updatedAt: Date
}
```

### Database Indexes
- **Books**: Text index on `title` and `author` for search functionality
- **Reviews**: Compound unique index on `book` + `user` (ensures one review per user per book)

## 🔧 Validation Rules

### User Registration
- **Username**: 3-30 characters, letters/numbers/underscore only
- **Email**: Valid email format, automatically normalized
- **Password**: Min 6 chars, must contain uppercase, lowercase, and number

### Book Creation
- **Title**: Required, max 200 characters
- **Author**: Required, max 100 characters
- **Genre**: Required, max 50 characters
- **Description**: Required, max 2000 characters
- **Published Year**: Must be between 1000 and current year
- **ISBN**: Optional, valid ISBN-10 or ISBN-13 format

### Review Submission
- **Rating**: Integer between 1-5
- **Comment**: 10-1000 characters
- **Constraint**: One review per user per book

## 🛡️ Security Features

- **🔐 JWT Authentication**: Secure token-based auth with 7-day expiration
- **🔒 Password Hashing**: bcrypt with 12 salt rounds
- **🚦 Rate Limiting**: 100 requests per 15 minutes per IP
- **✅ Input Validation**: Comprehensive validation with express-validator
- **🛡️ CORS Protection**: Configurable cross-origin resource sharing
- **🔰 Security Headers**: Helmet.js for secure HTTP headers
- **⚠️ Error Handling**: No sensitive information exposure
- **🚫 NoSQL Injection**: MongoDB injection protection

## 📈 API Response Patterns

### Success Responses
```javascript
// Single item creation
{
  "message": "Resource created successfully",
  "data": { /* created item */ }
}

// List with pagination
{
  "items": [ /* array of items */ ],
  "pagination": {
    "currentPage": 1,
    "totalPages": 5,
    "totalItems": 50,
    "hasNext": true,
    "hasPrev": false
  }
}
```

### Error Responses
```javascript
// Validation errors
{
  "errors": [
    { "field": "email", "message": "Please enter a valid email" }
  ]
}

// Single error
{
  "error": "Resource not found"
}
```

## 🚀 Production Deployment

### Environment Variables for Production
```env
NODE_ENV=production
PORT=3000
MONGODB_URI=mongodb+srv://user:password@cluster.mongodb.net/bookreviews
JWT_SECRET=your-super-long-random-secret-key-minimum-256-bits
```

### Production Checklist
- [ ] Set strong JWT_SECRET (minimum 64 characters)
- [ ] Use MongoDB Atlas or secured MongoDB instance
- [ ] Enable HTTPS
- [ ] Adjust rate limiting for your traffic
- [ ] Add proper logging (Winston, Morgan)
- [ ] Set up monitoring and health checks
- [ ] Use process manager (PM2)
- [ ] Set up backup strategy for database

### Deploy with PM2
```bash
# Install PM2 globally
npm install -g pm2

# Start the application
pm2 start server.js --name "book-review-api"

# Monitor
pm2 monit

# View logs
pm2 logs book-review-api
```

## 🧪 Testing the API

### Using Postman
1. Import the API endpoints into Postman
2. Create an environment with your base URL
3. Test the authentication flow first
4. Use the JWT token for protected endpoints

### Using cURL Scripts
Create a test script `test-api.sh`:
```bash
#!/bin/bash

BASE_URL="http://localhost:3000/api"

echo "Testing Book Review API..."

# Test signup
echo "1. Testing user signup..."
SIGNUP_RESPONSE=$(curl -s -X POST $BASE_URL/auth/signup \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser",
    "email": "test@example.com",
    "password": "TestPass123"
  }')

echo "Signup Response: $SIGNUP_RESPONSE"

# Extract token (you'll need jq for this)
TOKEN=$(echo $SIGNUP_RESPONSE | jq -r '.token')

echo "2. Testing add book..."
curl -X POST $BASE_URL/books \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $TOKEN" \
  -d '{
    "title": "Test Book",
    "author": "Test Author",
    "genre": "Test Genre",
    "description": "This is a test book description",
    "publishedYear": 2023
  }'
```

## 📝 Design Decisions & Assumptions

### Key Design Decisions

1. **📝 One Review Per User Per Book**: Users can submit only one review per book but can update/delete it
2. **📊 Automatic Rating Calculation**: Book average ratings are calculated automatically when reviews change
3. **🔓 Soft Authentication**: Non-authenticated users can view books and reviews but cannot create content
4. **📄 Pagination by Default**: 10 items per page to prevent overwhelming responses
5. **🔍 Case-Insensitive Search**: Better user experience with flexible search
6. **⏰ JWT Expiration**: 7-day token expiration for security vs. convenience balance

### Assumptions Made

1. **👤 Single Author Per Book**: Books have one author field (extensible to multiple authors)
2. **🏷️ Free-text Genres**: Genres are strings rather than predefined categories
3. **📚 Optional ISBN**: Not all books have ISBN numbers
4. **👁️ Public Reviews**: All reviews are visible to all users
5. **🔒 Immutable Books**: Books cannot be updated after creation (could be extended)
6. **👥 Simple User Roles**: Basic user/admin distinction (admin features not implemented)

## ❓ Troubleshooting

### Common Issues

#### 1. MongoDB Connection Error
```bash
# Check if MongoDB is running
sudo systemctl status mongodb

# Start MongoDB if not running
sudo systemctl start mongodb
```

#### 2. JWT Secret Error
Make sure your JWT_SECRET in `.env` is properly set and long enough.

#### 3. Port Already in Use
```bash
# Find process using port 3000
lsof -i :3000

# Kill the process
kill -9 <PID>
```

#### 4. Module Not Found Errors
```bash
# Reinstall dependencies
rm -rf node_modules package-lock.json
npm install
```

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

## 📄 License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## 📞 Support

If you encounter any issues or have questions:

1. Check the troubleshooting section above
2. Review the API documentation
3. Create an issue in the repository
4. Contact the development team

---

**🎉 Happy Coding! Your Book Review API is ready to serve bibliophiles worldwide! 📚✨**